/*global angular */

/**
 * @ngdoc service
 * @name TatUi.TatEngineProvider
 * @module TatUi
 * @description
 *
 * Manager TatEngine URI
 *
 */
angular.module('TatUi')
  .provider('TatEngine', function(appConfiguration) {
    'use strict';
    // appConfiguration is generated by grunt, using assets/config.json

    var self = this;
    var scheme;
    var host;

    this.options = appConfiguration.backend;

    this.$get = function(Flash, $translate) {

      /**
       * @ngdoc service
       * @name TatUi.TatEngine
       * @module TatUi
       * @description
       *
       * Manager TatEngine URI.
       */
      return {
        /**
         * @ngdoc function
         * @name buildUrl
         * @methodOf TatUi.TatEngine
         * @module TatUi
         * @description
         *
         * Build the URL to TatEngine
         *
         * @param {string} path Relative path to TatEngine
         */
        buildUrl: function(path) {
          if (!host) {
            scheme = self.options.scheme;
            host = self.options.host;
            if (self.options.port) {
              // check / in host example : host = "aaa.hhh.ccc/tat/ui"
              if (host.indexOf('/') > 0) {
                var posSlash = host.indexOf('/');
                var h = host.substring(0, posSlash);
                h += ':' + self.options.port;
                h += host.substring(posSlash, host.length);
                host = h;
              } else {
                host += ':' + self.options.port;
              }
            }
          }
          return scheme + "://" + host + path;
        },

        /**
         * @ngdoc function
         * @name displayReturn
         * @methodOf TatUi.TatEngine
         * @module TatUi
         * @description
         *
         * display return from TAT engine
         *
         * @param {object} err JSON returned by TAT engine
         */
        displayReturn: function(resp) {
          if (resp && resp.error) {
            Flash.create('danger', resp.error);
          } else if (resp && resp.info) {
            Flash.create('info', resp.info);
          } else if (resp && resp.data && resp.data.info) {
            Flash.create('info', resp.data.info);
          } else if (resp && resp.data && resp.data.error) {
            Flash.create('danger', resp.data.error);
          } else {
            Flash.create('danger', $translate.instant(
              'shared_common_an_error_occured'));
          }
        },

        /**
         * @ngdoc function
         * @name displayError
         * @methodOf TatUi.TatEngine
         * @module TatUi
         * @description
         *
         * display error from TAT engine
         *
         * @param {object} err JSON returned by TAT engine
         */
        displayError: function(err) {
          Flash.create('danger', (err && err.error) ? err.error :
            $translate.instant('shared_common_an_error_occured'));
        },

        /**
         * @ngdoc function
         * @name displayInfo
         * @methodOf TatUi.TatEngine
         * @module TatUi
         * @description
         *
         * display info
         *
         * @param {object} info JSON
         */
        displayInfo: function(resp) {
          Flash.create('info', (resp && resp.info) ? resp.info :
            $translate.instant('shared_common_an_error_occured'));
        }
      };
    };
  });
